%% function for permutation testing

function cv_ICV_bootstrap_csv(i, analysis_folder)

m_setup = matfile([analysis_folder '/bootstrap_setup.mat']);

if m_setup.selection_train == 1
    m_data = matfile([analysis_folder, '/bootstrap_partition_fold.mat']);
    m_opt = matfile([analysis_folder '/bootstrap_opt.mat']);
end

% 1) retrain on single test splits within
% folds, then merge, 2) retrain on all inner folds
% separately, then merge with mean or median, 3)
% retrain on entirety of inner folds, 4) use already
% existing u and v from inner folds without retraining

matrices = m_data.train_data_matrices;
covars = m_data.train_covariates;
labels = m_data.train_DiagNames;

cs_method_bootstrap = m_data.cs_method;
correction_target = m_setup.correction_target;

[~,bootsam] = bootstrp(m_setup.size_sets_bootstrap,[],1:size(matrices{1},1));

% perform procrustean transformation to minimize rotation effects of
% permutated y matrix, if V_opt available
RHO_boot=[]; weights_boot=[];
for ii=1:size(bootsam,2)

        for num_m=1:length(matrices)
            matrices_boot{num_m} = matrices{num_m}(bootsam(:,ii),:);
        end

        c_weights = m_opt.c_weights_opt;
  
    covars_boot = covars(bootsam(:,ii),:);
    labels_boot = labels(bootsam(:,ii),:);
    
    cs_method_bootstrap.subgroup_train = matches(labels_boot, cs_method_bootstrap.correction_subgroup);
    cs_method_bootstrap.subgroup_test = matches(labels_boot, cs_method_bootstrap.correction_subgroup);
    [OUT_matrices] = cv_master_correctscale(matrices_boot, covars_boot, cs_method_bootstrap, correction_target);


    
    if ~islogical(m_opt.Vs_opt)
        [RHO_boot(1,ii), weights_boot(:,ii), ~, ~] = cv_gspls_full(OUT_matrices, OUT_matrices, c_weights, m_setup.correlation_method, m_opt.Vs_opt);
    else
        [RHO_boot(1,ii), weights_boot(:,ii), ~, ~] = cv_gspls_full(OUT_matrices, OUT_matrices, c_weights, m_setup.correlation_method);
    end
end

if isnumeric(i)
    writematrix(RHO_boot,[analysis_folder, '/RHO_results_', num2str(i), '.csv'],'Delimiter','tab')
else
    writematrix(RHO_boot,[analysis_folder, '/RHO_results_', i, '.csv'],'Delimiter','tab')
end


for num_m=1:length(matrices)
    if isnumeric(i)
        writematrix(cell2mat(weights_boot(num_m,:)), [analysis_folder, '/weights_', num2str(num_m), '_results_', num2str(i), '.csv'],'Delimiter','tab')
    else
        writematrix(cell2mat(weights_boot(num_m,:)), [analysis_folder, '/weights_', num2str(num_m), '_results_', i, '.csv'],'Delimiter','tab')
    end
end


end